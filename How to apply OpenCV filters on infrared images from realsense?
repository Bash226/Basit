from PIL import ImageFilter 
import pyrealsense2 as rs
from PIL import Image
import numpy as np
import cv2

pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.infrared,1, 640, 480, rs.format.y8, 30)

profile = pipeline.start(config)

device = profile.get_device()
depth_sensor = device.first_depth_sensor()
device.hardware_reset()


while True:


    frames = pipeline.wait_for_frames()
    #it will get infrared frame from left ir camera
    left_ir_frame = frames.get_infrared_frame(1)    

    left_image = np.asanyarray(left_ir_frame.get_data())
    cv2.imwrite('img.png', left_image)

# GaussianBlur apply

 #   blurred_ir = cv2.GaussianBlur(left_image, (5, 5), 100)

#    cv2.imwrite('img.png', blurred_ir)
#contour filter
#    ret, thresh = cv2.threshold(left_image, 127, 255, cv2.THRESH_BINARY)
 #   contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# it will apply contour on left_image
 #   cv2.drawContours(left_image, contours, -1, (0,255,0), 3) 
   # cv2.imwrite('img.png', left_image)
# sobel filter 
    sobel_x = cv2.Sobel(left_image, cv2.CV_64F, 1, 0, ksize=5)
    sobel_y = cv2.Sobel(left_image, cv2.CV_64F, 0, 1, ksize=5)
    sobel = np.sqrt(np.square(sobel_x) + np.square(sobel_y))
    sobel = np.uint8(sobel)
    cv2.imwrite('img.png', sobel)

    images = np.hstack((left_image,sobel))
#   view images in realsense window
    cv2.namedWindow('RealSense', cv2.WINDOW_AUTOSIZE)
    cv2.imshow('RealSense', images)

    cv2.waitKey(1)

pipeline.stop()
pipeline.close()
